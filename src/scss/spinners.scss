/*
================================================================================
SPINNERS
================================================================================
USAGE

Default:

.my-spinner {
 @include spinner();
}


Custom:

.my-spinner {
 @include spinner(1.25em, 3px solid #555, .7s, background rgba(0, 0, 0, .2);
}

All arguments are optional.

Acceppts any valid CSS dimensional declaration, e.g px, em, rem as an argument for size.

Use either shorthand border declarations or individual 'border-[property] [value]' (no colon!) pairs for the style.

Pass any number of seconds referring to the duration of one full rotation for animation speed.

--------------------------------------------------------------------------------
*/

//start refracter spinner

.spinner-container {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    width: 100%;
    height: 100%;
    background: $medBackground;
    //default not showing
    opacity: 0;
    visibility: hidden;

    .refracter-spinner {
        position: relative;
        font-size: 150px;
        width: 1em;
        height: 1em;
        display: flex;
        align-items: center;
        justify-content: center;
        color: $primaryColor;
        //default state
        transform: scale(0);

        span {
            position: absolute;
            height: 100%;
        }

        .refracter-logo-spinner-outer {
            animation-name: rotateRefracterSpinner;
            animation-duration: 1.5s;
            animation-timing-function: cubic-bezier(0.445, 0.050, 0.550, 0.950);
            animation-iteration-count: infinite;

            @keyframes rotateRefracterSpinner {
                0% {
                    transform: rotate3d(0,0,1,45deg);
                }
                100% {
                    transform: rotate3d(0,0,1,405deg);
                }
            }
        }


        .refracter-logo-spinner-middle {
            animation-name: pulseRefracterSpinner;
            animation-duration: 1.5s;
            animation-timing-function: cubic-bezier(0.445, 0.050, 0.550, 0.950);
            animation-iteration-count: infinite;
        }

        @keyframes pulseRefracterSpinner {
            0% {
                transform: scale(0.6);
            }
            50% {
                transform: scale(1.2);
            }
            100% {
                transform: scale(0.6);
            }
        }
    }

    &.showing {
        visibility: visible;
        opacity: 1;

        // animation-name: showSpinnerContainer;
        // animation-duration: .3s;
        // animation-timing-function: cubic-bezier(0.445, 0.050, 0.550, 0.950);
        // animation-fill-mode: forwards;
        // @keyframes showSpinnerContainer {
        //     0% {
        //         opacity: 0;
        //     }
        //     100% {
        //         opacity: 1;
        //     }
        // }

        .refracter-spinner {
            animation-name: showSpinner;
            animation-duration: .3s;
            //animation-delay: .3s;
            animation-timing-function: cubic-bezier(0.445, 0.050, 0.550, 0.950);
            animation-fill-mode: forwards;
            @keyframes showSpinner {
                0% {
                    transform: scale(0);
                }
                100% {
                    transform: scale(1);
                }
            }

        }

    }

    &.hiding {
        visibility: visible;
        animation-name: hideSpinnerContainer;
        animation-duration: .3s;
        animation-timing-function: cubic-bezier(0.445, 0.050, 0.550, 0.950);
        animation-fill-mode: forwards;
        @keyframes hideSpinnerContainer {
            0% {
                opacity: 1;
            }
            99% {
                opacity: 0;
            }
            100% {
                visibility: hidden;
            }
        }

        .refracter-spinner {
            transform: scale(1);
            animation-name: hideSpinner;
            animation-duration: .3s;
            animation-timing-function: cubic-bezier(0.445, 0.050, 0.550, 0.950);
            animation-fill-mode: forwards;
            @keyframes hideSpinner {
                0% {
                    transform: scale(1);
                }
                100% {
                    transform: scale(0);
                }
            }

        }
    }
}

// end refracter spinner

@mixin spinner-keyframes {
  @-webkit-keyframes spinner-animation {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }
  @-moz-keyframes spinner-animation {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }
  @-ms-keyframes spinner-animation {
    0% {
      -ms-transform: rotate(0deg);
    }
    100% {
      -ms-transform: rotate(360deg);
    }
  }
  @-o-keyframes spinner-animation {
    0% {
      -o-transform: rotate(0deg);
    }
    100% {
      -o-transform: rotate(100deg);
    }
  }
  @keyframes spinner-animation {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
}



@include spinner-keyframes();



@mixin spinner($args...) {
  $prefixes: -webkit- -moz- -o- -ms- "";
  $dimensional-units: ('px', 'em', 'rem', '%', 'ex');
  $border-props: 'border-width' 'border-style' 'border-color';
  $border-styles: solid dotted dashed double;
  $size: 1em;
  $border-width: 3px;
  $border-style: solid;
  $border-color: #1277c2;
  $border: $border-width $border-style $border-color;
  $duration: .65s;
  $background: transparent; //

  // Parse arguments:
  @if $args {
    @each $arg in $args {
      @if length($arg) == 1 {
        @if type-of($arg) == number {
          @if unit($arg) != "" {
            @if unit($arg) == 's' {
              $duration: $arg;
            }
            @else if isIn($dimensional-units, unit($arg)) {
              $size: $arg;
            }
            @else {
              @warn "Spinner: \"#{$arg}\" is not a valid size or duration declaration!";
            }
          }
          @else {
            @warn "Spinner: \"#{$arg}\" is not a valid size or duration declaration!";
          }
        }
      }
      @else if length($arg) == 2 {
        $prop: nth($arg, 1);
        $val: nth($arg, 2);
        @if isIn($border-props, $prop) {
          @if $prop == 'border-width' {
            @if unit($val) == 'px' {
              $border-width: $val;
            }
            @else {
              @warn "Spinner: \"#{unit($val)}\" is not a valid border-width! Using default border-width.";
            }
          }
          @else if $prop == 'border-style' {
            @if isIn($border-styles, $val) {
              $border-style: $val;
            }
            @else {
              @warn "Spinner: \"#{$val}\" is not a valid border-style! Using default border-style.";
            }
          }
          @else if $prop == 'border-color' {
            @if type-of($val) == color {
              $border-color: $val;
            }
            @else {
              @warn "Spinner: \"#{$val}\" is not a valid border-color! Using default border-color.";
            }
          }
        }
        @else if $prop == 'background' {
          @if type-of($val) == color {
            $background: $val;
          }
          @else {
            @warn "Spinner: \"#{nth($val)}\" is not a valid color for background! Using default \"transparent\".";
          }
        }
        @else {
          @warn "Spinner: \"#{nth($arg, 1)}\" is not a valid border property! Using default border.";
        }
        $border: $border-width $border-style $border-color;
      }
      @else if length($arg) == 3 {
        @if isValidBorder($arg) {
          $border: $arg;
        }
        @else {
          @warn "Spinner: \"#{$arg}\" is not a valid shorthand border declaration! Using default border.";
        }
      }
    }
  }



  background-color: transparent;
  border: $border;
  border-radius: 50%;
  border-top-color: $background;
  border-right-color: $background;
  width: $size;
  height: $size;
  display: inline-block;
  vertical-align: middle;
  @each $prefix in $prefixes {
    #{$prefix}box-sizing: border-box;
  }
  @each $prefix in $prefixes {
    #{$prefix}animation: spinner-animation $duration infinite linear;
  }
}



@function isValidBorder($border) {
  $validBorderTypes: color string number;
  $borderStyles: solid dotted dashed double;
  $validBorder: false;
  $types: ();

  @if length($border) == length($validBorderTypes) {
    @each $val in $border {
      @if type-of($val) == number {
        @if unit($val) == "" {
          @return false;
        }
      }
      @else if type-of($val) == string {
        @if not isIn($borderStyles, $val) {
          @return false;
        }
      }
      $types: append($types, type-of($val));
    }
    $validBorder: hasIdenticalValues($validBorderTypes, $types);
  }

  @return $validBorder;
}



@function hasIdenticalValues($arr1, $arr2) {
  $id: false;
  @each $val in $arr1 {
    @if isIn($arr2, $val) {
      $id: true;
    }
    @else {
      @return false;
    }
  }
  @return $id;
}



@function isIn($arr1, $val) {
  $hasVal: false;
  @each $item in $arr1 {
    @if $item == $val {
      $hasVal: true;
    }
  }
  @return $hasVal;
}

.spinner {
    @include spinner();
}
